{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/APIUtils.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/Country.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","positive","death","date","dateChecked","fetchCountries","countries","name","console","log","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchDailyDataApi","lineChart","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","initialCountriesData","fetchCountriesAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8536929d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n//Passed in 'data' as props to Cards function\n// Now you destructure {data}\n\n// Destructure again w/ {confirmed} = data\nconst Cards = ({data}) => {\n    const {confirmed, recovered, deaths, lastUpdate} = data\n\n    if (!confirmed) {\n        return 'Loading...';\n    }\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom> Infected  </Typography>\n                        <Typography variant=\"h5\" gutterBottom> <CountUp start={0} end={confirmed.value} duration={2} separator=\",\"/> </Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>  {new Date(lastUpdate).toDateString()} </Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>  Number of active cases of COVID-19 </Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom> Recovered </Typography>\n                        <Typography variant=\"h5\" gutterBottom> <CountUp start={0} end={recovered.value} duration={2} separator=\",\"/> </Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>  {new Date(lastUpdate).toDateString()} </Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>  Number of recovered from COVID-19 </Typography>\n                    </CardContent>\n                </Grid>                \n                \n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom> Deaths </Typography>\n                        <Typography variant=\"h5\" gutterBottom> <CountUp start={0} end={deaths.value} duration={2} separator=\",\"/> </Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>  {new Date(lastUpdate).toDateString()} </Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>  Number of deaths caused by COVID-19 </Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","// Data Fetching Functions\n\nimport axios from 'axios';\n\nconst url = \"https://covid19.mathdro.id/api\";\n\n//asynch fat arrow function \n// this await asynchronous function deals w/ promises the same way as .then && .catch\n// easier to read and write\n\n// const countries = [a,b,c,d,e]\n// const globalData = [];\n\n// export const globalData = async() => {\n//     try {\n//         for (let country of countries) {\n//         const url = `https://covid19.mathdro.id/${country}`;\n            \n//             globalData.push(await axios.get(url))\n//         }\n//         return globalData\n\n//     } catch (error) {\n\n//     }\n// }\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        const { data } = await axios.get(changeableUrl);\n\n        // Data is the POJO of received data\n        // modify the POJO to select the Keys you wanted to be returned\n        const modifiedData = {\n            confirmed: data.confirmed,\n            recovered: data.recovered,\n            deaths: data.deaths,\n            lastUpdate: data.lastUpdate,\n        }\n\n        return modifiedData;\n\n    } catch (error) {\n        \n    }\n}\n\n\nexport const fetchDailyData = async () => {\n    try {\n      const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\n\n      return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\n    } catch (error) {\n      return error;\n    }\n  };\n\nexport const fetchCountries = async () => {\n    try {\n        const {data: {countries}} = await axios.get(`${url}/countries`)\n\n        return countries.map( (country) => country.name)\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n// export const fetchCountry = async() => {\n//     try {\n//         const { data } = await axios.get('https://covid19.mathdro.id/api/countries/')\n\n//         return data.map( ({confirmed, recovered, deaths}) => ({confirmed, recovered, deaths}))\n//     } catch (error) {\n        \n//     }\n// }","import React, { useState, useEffect } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport { fetchDailyData } from \"../../api/APIUtils\";\n\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({data, country}) => {\n  //   // you set your State using const\n  //   // dailyData will be the state, setDailyData will be setting the state\n  //   // useState(some value) : some value will be the initial value youre setting state to\n\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchDailyDataApi = async (country) => {\n      const initialDailyData = await fetchDailyData(country);\n\n      setDailyData(initialDailyData);\n    };\n\n    fetchDailyDataApi();\n  }, []);\n\n\n\n  const lineChart = dailyData[0] ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) =>\n          new Date(date).toLocaleDateString()\n        ),\n        datasets: [\n          {\n            data: dailyData.map((data) => data.confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map((data) => data.deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n            fill: true,\n          },\n          {\n            data: dailyData.map((data) => data.recovered),\n            label: \"Recovered\",\n            borderColor: \"green\",\n            backgroundColor: \"rgba(0, 255, 0, 0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = (\n    data.confirmed ? (\n      <Bar \n        data={{\n          labels: ['Infected', 'Recovered', 'Deaths'],\n          datasets: [{\n            label: 'People',\n            backgroundColor: [\n              'rgba(0,0,255, 0.5)',\n              'rgba(0,255,0, 0.5)',\n              'rgba(255,0,0, 0.5)',\n             ],\n            data:[data.confirmed.value, data.recovered.value, data.deaths.value]\n          }]\n        }}\n        \n        options={{\n          legend: { display : false},\n          title: {display: true, text: `Current state in ${country}`}\n        }}\n      />\n    ) : null\n  );\n\n  return (\n    <div className={styles.container}>\n      {country ? barChart : lineChart}\n    </div>\n  );\n};\n\nexport default Chart;\n","import React, { useEffect, useState } from \"react\";\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport { fetchCountries } from '../../api/APIUtils';\n\nimport styles from './Country.module.css';\n\nconst CountryPicker = ({handleCountryChange}) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n\n  useEffect( () => {\n    const fetchCountriesAPI = async () => {\n      let initialCountriesData = await fetchCountries();\n      \n      setFetchedCountries(initialCountriesData);\n    }\n\n    fetchCountriesAPI();\n  }, [setFetchedCountries]);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect defaultValue=\"\" onChange={ (e) => handleCountryChange(e.target.value)}>\n        <option value=\"\">Global</option>\n        {fetchedCountries.map( (country, i) => <option key={i} value={country}>{country}</option>)}\n\n      </NativeSelect>\n    </FormControl>\n  )\n};\n\nexport default CountryPicker;\n","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\nimport { Cards, Chart, CountryPicker } from \"./components/\";\nimport { fetchData } from './api/APIUtils';\n\nimport coronaImage from './images/image.png';\nimport styles from './App.module.css';\n\nclass App extends React.Component {\n    state = {\n        data: {},   \n        country: '',\n    }\n\n    async componentDidMount() {\n        // await because fetchData is an asynchronous function\n        // After you fetched the data from API Call, you setState on the fetchedData \n        const fetchedData = await fetchData();\n        \n        this.setState( {data: fetchedData} )\n    }\n\n\n    handleCountryChange =  async (country) => {\n        //fetch data\n        const fetchedData = await fetchData(country);\n        // set State so it can be passed to child components\n        this.setState( {data: fetchedData, country: country} )\n    }\n\n    render() {\n        const {data, country} = this.state;\n        \n        return (\n            <div className={styles.container}>\n                <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\n                <Cards data={data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country}/>\n            </div>\n        )\n    }\n}\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(< App/>, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Country_formControl__2IbjM\"};"],"sourceRoot":""}